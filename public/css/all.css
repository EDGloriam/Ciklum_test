html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

ol,
ul {
  list-style: none;
}

body {
  min-width: 320px;
}

@-webkit-keyframes appearing {
  0% {
    opacity: 0;
  }

  30% {
    opacity: 0.5;
  }

  100% {
    opacity: 1;
  }
}

@keyframes appearing {
  0% {
    opacity: 0;
  }

  30% {
    opacity: 0.5;
  }

  100% {
    opacity: 1;
  }
}

#slider {
  width: 70%;
  height: auto;
  margin: auto;
}

#slider .slider-container {
  position: relative;
}

#slider .slider-body {
  overflow: hidden;
}

#slider .slider-items {
  position: relative;
}

#slider .slider-items .item {
  border-radius: 25px;
  height: 550px;
  border-radius: 10px;
  display: none;
  background: rgba(0, 0, 0, 0.3);
  position: relative;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: 50% 50%;
}

#slider .slider-items .item.active {
  -webkit-animation: appearing 1s;
          animation: appearing 1s;
}

#slider .slider-items .item[data-item="1"] {
  background-image: url("../img/1.jpg");
}

#slider .slider-items .item[data-item="2"] {
  background-image: url("../img/2.jpg");
}

#slider .slider-items .item[data-item="3"] {
  background-image: url("../img/3.jpg");
}

#slider .slider-items .item[data-item="4"] {
  background-image: url("../img/4.jpg");
}

#slider .slider-items .item[data-item="5"] {
  background-image: url("../img/5.jpg");
}

#slider .slider-items .item[data-item="6"] {
  background-image: url("../img/6.jpg");
}

#slider .slider-items .item[data-item="7"] {
  background-image: url("../img/7.jpg");
}

#slider .slider-items .item[data-item="8"] {
  background-image: url("../img/8.jpg");
}

#slider .slider-items .item[data-item="9"] {
  background-image: url("../img/9.jpg");
}

#slider .slider-items .item[data-item="10"] {
  background-image: url("../img/10.jpg");
}

#slider .control {
  position: absolute;
  top: 0;
  width: 70px;
  font-size: 3em;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  height: 100%;
  z-index: 1;
}

#slider .control i {
  color: #91928D;
}

#slider .control:hover {
  background: rgba(0, 0, 0, 0.3);
  cursor: pointer;
}

#slider .control:hover i {
  color: #0493E5;
}

#slider .left {
  left: 0;
}

#slider .right {
  right: 0;
}

#slider .pages {
  bottom: -25px;
  position: absolute;
  width: 100%;
}

#slider .pages .wrapper {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: distribute;
      justify-content: space-around;
  width: 200px;
  margin: auto;
}

#slider .pages .wrapper .rect {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: grey;
}

#slider .pages .wrapper .rect.active {
  background: #0493E5;
}

#slider .pages .wrapper .rect:hover {
  cursor: pointer;
}

@media only screen and (max-width: 1199px) {
  #slider .slider-items .item {
    height: 500px;
  }
}

@media only screen and (max-width: 991px) {
  #slider {
    width: 80%;
  }

  #slider .slider-items .item {
    height: 400px;
  }

  #slider .control {
    width: 50px;
  }

  #slider .control {
    font-size: 2em;
  }
}

@media only screen and (max-width: 767px) {
  #slider {
    width: 90%;
  }

  #slider .slider-items .item {
    height: 300px;
  }

  #slider .slider-items .item {
    border-radius: 10px;
  }

  #slider .control {
    width: 45px;
  }

  #slider .control {
    font-size: 1.5em;
  }

  #slider .pages .wrapper .rect {
    width: 10px;
  }

  #slider .pages .wrapper .rect {
    height: 10px;
  }
}

@media only screen and (max-width: 576px) {
  #slider {
    width: 95%;
  }

  #slider .slider-items .item {
    height: 250px;
  }

  #slider .slider-items .item {
    border-radius: 10px;
  }

  #slider .control {
    width: 35px;
  }

  #slider .control {
    font-size: 1.1em;
  }

  #slider .pages .wrapper .rect {
    width: 8px;
  }

  #slider .pages .wrapper .rect {
    height: 8px;
  }
}

@media only screen and (max-width: 320px) {
  #slider {
    width: 95%;
  }

  #slider .slider-items .item {
    border-radius: 10px;
  }

  #slider .control {
    width: 30px;
  }

  #slider .control {
    font-size: 1em;
  }

  #slider .pages .wrapper .rect {
    width: 8px;
  }

  #slider .pages .wrapper .rect {
    height: 8px;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
